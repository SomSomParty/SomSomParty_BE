spring:
  datasource:
    url: ${rds.url}
    username: ${rds.user}
    password: ${rds.password}
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        show_sql: true
        format_sql: true
        dialect: org.hibernate.dialect.MySQLDialect
  aws:
    dynamodb:
      endpoint: ${dynamodb.url}
      region: ${region}
  data:
    redis:
      host: ${elastic_cache.url}
      port: 6379
  cloud:
    aws:
      region:
        static: ${region}
        credentials:
          instance-profile: true # IAM 역할 사용
        stack:
          auto: false
      queue:
        region: ${region}
      sqs:
        queue-name: ${wait_sqs.name}
aws:
  noti:
    region: ${region}
    sqs:
      queue-name: ${noti_sqs.name}
      queue-url: ${noti_sqs.url}
    sns:
      application-arn: ${noti_sns.arn}

  auth:
    cognito:
      user-pool-id: ${cognito.user_pool_id}
      app-client-id: ${cognito.client_id}
      client-secret: ${cognito.client_secret}
      jwks-url: ${cognito.jwks_url}

  kafka:
    bootstrap-servers:
      - ${kafka.broker1}
      - ${kafka.broker2}
      - ${kafka.broker3}
    consumer:
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    properties:
      security.protocol: SASL_SSL
      sasl.mechanism: AWS_MSK_IAM
      sasl.jaas.config: software.amazon.msk.auth.iam.IAMLoginModule required;
      sasl.client.callback.handler.class: software.amazon.msk.auth.iam.IAMClientCallbackHandler

logging:
  level:
    root: DEBUG
    org.apache.kafka: ERROR