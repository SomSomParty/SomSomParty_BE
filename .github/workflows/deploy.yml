name: Build, Push to ECR, and Update ASG

on:
  push:
    branches:
      - test

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      ECR_REPOSITORY_NAME: somparty
      AWS_REGION: ap-northeast-2

    steps:
      # 1. Java 17 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 2. 깃허브 레포에서 코드 가져오기
      - name: Checkout Code
        uses: actions/checkout@v3

      # 3. Gradle 빌드
      - name: Build Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew build -x test

      # 4. AWS IAM 역할로 GitHub Action에 AWS 접근 권한 부여
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ secrets.ACTION_ROLE_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      # 5. Amazon ECR 로그인
      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      # 6. 도커 이미지 빌드
      - name: Build Docker Image
        run: |
          docker build -t ${{ env.ECR_REPOSITORY_NAME }}:latest .
          docker tag ${{ env.ECR_REPOSITORY_NAME }}:latest ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY_NAME }}:latest

      # 7. ECR로 빌드한 이미지 푸시
      - name: Push to Amazon ECR
        run: |
          docker push ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY_NAME }}:latest

      # 8. 새로운 AMI 생성
      - name: Create a new AMI
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=BaseImageInstance" --query "Reservations[].Instances[].InstanceId" --output text --region ${{ env.AWS_REGION }})
          AMI_ID=$(aws ec2 create-image --instance-id $INSTANCE_ID --name "somparty-$(date +'%Y-%m-%d-%H-%M-%S')" --output text --query "ImageId" --region ${{ env.AWS_REGION }})
          echo "AMI_ID=${AMI_ID}" >> $GITHUB_ENV

      # 9. 오토스케일링 그룹 업데이트
      - name: Update Auto Scaling Group
        run: |
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name ${{ secrets.ASG_NAME }} \
            --launch-template "LaunchTemplateName=${{ secrets.LAUNCH_TEMPLATE_NAME }},Version=\$Latest" \
            --region ${{ env.AWS_REGION }}